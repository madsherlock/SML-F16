%% Running time plots, based on old data, that shouldn't be recollected.
% Data generated by test-k-NN-runningTime-vs-DPI-k-n.R
% This data is in the following files:
% '../data/runningTimekNN-2-2-sig1.5-DPI100.csv'
% '../data/runningTimekNN-2-2-sig2.5-DPI200.csv'
% '../data/runningTimekNN-2-2-sig3.5-DPI300.csv'
% The data is old and based on the old type of preprocessing,
% but still accurately reflects k-NN prediction running times.
close all;
runningTimeKNN
figure(1);
print('plots/knn-runningTimeVsKVSN-G2M2-dpi100.eps','-depsc');
figure(2);
print('plots/knn-runningTimeVsKVSN-G2M2-dpi200.eps','-depsc');
figure(3);
print('plots/knn-runningTimeVsKVSN-G2M2-dpi300.eps','-depsc');
figure(4);
legend('100 DPI','200 DPI','300 DPI','O(N) reference',...
    'Location','NorthWest');
print('plots/knn-runningTimeVsNVsDPI-G2M2.eps','-depsc');
close all;
%% Person dependent Accuracy vs. sigma and k
testPerson='G2M2';
%Import all sigma-k data into D
[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
    importCVSigK(...
    ['../data/knnPersonDependentCV-',testPerson,...
    'dpi100-rep10-results.csv']);
D_pd{1}=[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD];
[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
    importCVSigK(...
    ['../data/knnPersonDependentCV-',testPerson,...
    'dpi200-rep10-results.csv']);
D_pd{2}=[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD];
[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
    importCVSigK(...
    ['../data/knnPersonDependentCV-',testPerson,...
    'dpi300-rep10-results.csv']);
D_pd{3}=[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD];

clear sigma k Accuracy Kappa AccuracySD KappaSD;



for it = 1:3
    [Y,idx] = max(D_pd{it}(:,3));
    best_acc(it)=D_pd{it}(idx,3);
    best_sigma(it)=D_pd{it}(idx,1);
    best_k(it)=D_pd{it}(idx,2);
end



% Make 3 heatmaps of sigma-vs-k accuracy
for it = 1:3
    clear Z
    figure(it);
    DPI=100*it;
    sigma_list = unique(D_pd{it}(:,1));
    k_list = unique(D_pd{it}(:,2));
    for x=1:length(sigma_list)
        for y=1:length(k_list)
            Z(y,x)=D_pd{it}((x-1)*length(k_list)+y,3);
        end
    end
    contourf(sigma_list,k_list,Z);
    text(best_sigma(it)+0.05,best_k(it)+0.2,num2str(best_acc(it)));
    hold on;
    scatter(best_sigma(it),best_k(it));
    hold off;
    xlabel('\sigma');
    ylabel('k');
    grid on;
    colorbar;
    colormap('jet');
    caxis([min(D_pd{1}(:,3)),1]);
    title({['Accuracy vs. \sigma and k, ',...
        sprintf('%d DPI on ',DPI),testPerson,...
        ','],'10-repeat 10-fold cross validation'});
    set(gca,'FontSize',9);
    print(['plots/knn-AccVsKVsSigma-',testPerson,...
        '-dpi',num2str(it),'00-cv10.eps'],'-depsc');
end

clear it k_list sigma_list DPI x y Z idx

%% Person dependent Accuracy vs. sigma with optimal k at various DPI
%  Accuracy vs. k is not interesting, as it's almost constant.
for it = 1:3
    figure(3+it);
    DPI=100*it;
    sigma_list = unique(D_pd{it}(:,1));
    k_list = unique(D_pd{it}(:,2));
    idx = find(D_pd{it}(:,2)==best_k(it));
    accStdDevs = [-D_pd{it}(idx,5), D_pd{it}(idx,5)];
    bar(sigma_list,D_pd{it}(idx,3),'FaceColor',[0.5 0.5 0.5]); hold on;
    errorbar(sigma_list,D_pd{it}(idx,3),accStdDevs(:,1),accStdDevs(:,2),'k', 'linestyle', 'none');
    hold off;
    grid on; grid minor;
    ylabel('Accuracy');
    xlabel('\sigma');
    title({['Accuracy at ',num2str(it),'00 DPI, k = ',...
        num2str(best_k(it)),', ',testPerson,...
        ', with std. devs.,'],'10-repeat 10-fold cross validation'});
    print(['plots/knn-AccVsSigma-',testPerson,...
        '-dpi',num2str(it),'00-cv10.eps'],...
    '-depsc');
end

%% Person dependent confusion matrix at various DPI with best k and sigma
for it = 1:3
    figure(6+it);
    DPI=100*it;
    %Load confusion matrix
    confMatPD{it} = importConfMat(...
        ['../data/knnPersonDependentCV-',testPerson,'dpi',num2str(it),...
        '00-sig',num2str(best_sigma(it)),'-k',num2str(best_k(it)),...
        '-confusionMatrix.csv']);
    %Scale down to 100 % range
    n=sum(sum(confMatPD{it}));
    mat=(confMatPD{it}./...
        repmat(sum(confMatPD{it},2),1,size(confMatPD{it},2)))*100;
    %Digit names
    names = cell(1,10);
    for jt = 1:10
        names{jt} = num2str(jt-1);
    end
    %Colored plot of the confusion matrix values
    imagesc(mat);
    colormap(parula);
    %Create strings from the matrix values
    textStrings = num2str(mat(:),'%0.1f%%');
    %Remove space padding
    textStrings = strtrim(cellstr(textStrings));
    %Create x and y coordinates for the strings
    [x,y] = meshgrid(1:10);
    %Plot the strings
    hStrings = text(x(:),y(:),textStrings(:),...
                'HorizontalAlignment','center',...
                'FontSize',7);
    %Get the middle value of the color range
    midValue = mean(get(gca,'CLim'));
    %Choose white/black text color based on cell color
    textColors = repmat(mat(:) < midValue,1,3);
    set(hStrings,{'Color'},num2cell(textColors,2));
    colormap('parula');
    colorbar;
    caxis([0 100]);
    set(gca, 'XTick',1:10,'YTick', 1:10);
    set(gca,'XTickLabel',names);
    set(gca,'YTickLabel',names);
    xlabel('Reference');
    ylabel('Prediction');
    title({['k-NN Confusion Matrix, ',testPerson,...
        ', k=',num2str(best_k(it)),', ',num2str(it),'00 DPI,'],...
        '10-repeat 10-fold cross validation'});
    set(gca,'PlotBoxAspectRatio',[1 1 1]);
    print(['plots/knn-ConfMat-',testPerson,...
        '-dpi',num2str(it),'00-cv10.eps'],...
    '-depsc');
end


%% Dataset "fewer, mixed", Accuracy vs. k
%Import all sigma-k data into D
[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
    importCVSigK(...
    '../data/knnFewerMixedCV-dpi100-rep10-results.csv');
D_fm{1}=[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD];

clear sigma k Accuracy Kappa AccuracySD KappaSD;

% Plot Accuracy +- SD vs. k in barplot
%  sigma in title
figure(10);
k_list = unique(D_fm{1}(:,2));
accStdDevs = [-D_fm{1}(:,5), D_fm{1}(:,5)];
bar(k_list,D_fm{1}(:,3),'FaceColor',[0.5 0.5 0.5]); hold on;
errorbar(k_list,D_fm{1}(:,3),accStdDevs(:,1),accStdDevs(:,2),'k', 'linestyle', 'none');
hold off;
grid on; grid minor;
ylabel('Accuracy');
xlabel('k');
title({['Accuracy at 100 DPI, \sigma = ',num2str(D_fm{1}(1,1)),...
    ', dataset "fewer",'],...
    'with std. devs., 10-repeat 10-fold cross validation'});
print('plots/knn-AccVsSigma-fewerMixed-dpi100-cv10.eps','-depsc');

% Plot confusion matrix
%  sigma in title
figure(11);
DPI=100;
%Load confusion matrix
confMatFM = importConfMat(...
    '../data/knnFewerMixedCV-dpi100-sig0.6-k1-confusionMatrix.csv');
%Scale down to 100 % range
n=sum(sum(confMatFM));
mat=(confMatFM./...
    repmat(sum(confMatFM,2),1,size(confMatFM,2)))*100;
%Digit names
names = cell(1,10);
for jt = 1:10
    names{jt} = num2str(jt-1);
end
%Colored plot of the confusion matrix values
imagesc(mat);
colormap(parula);
%Create strings from the matrix values
textStrings = num2str(mat(:),'%0.1f%%');
%Remove space padding
textStrings = strtrim(cellstr(textStrings));
%Create x and y coordinates for the strings
[x,y] = meshgrid(1:10);
%Plot the strings
hStrings = text(x(:),y(:),textStrings(:),...
    'HorizontalAlignment','center',...
    'FontSize',7);
%Get the middle value of the color range
midValue = mean(get(gca,'CLim'));
%Choose white/black text color based on cell color
textColors = repmat(mat(:) < midValue,1,3);
set(hStrings,{'Color'},num2cell(textColors,2));
colormap('parula');
colorbar;
caxis([0 100]);
set(gca, 'XTick',1:10,'YTick', 1:10);
set(gca,'XTickLabel',names);
set(gca,'YTickLabel',names);
xlabel('Reference');
ylabel('Prediction');
title({'k-NN Confusion Matrix, dataset "fewer",',...
    'k=1, 100 DPI, 10-repeat 10-fold cross validation'});
set(gca,'PlotBoxAspectRatio',[1 1 1]);
print(['plots/knn-ConfMat-fewerMixed',...
    '-dpi100-cv10.eps'],...
    '-depsc');

%% Dataset "all, mixed", Accuracy vs. k
% %Import all sigma-k data into D
% [sigma,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
%     importCVSigK(...
%     '../data/knnAllMixedCV-dpi100-rep10-results.csv');
% D_am{1}=[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD];
% 
% clear sigma k Accuracy Kappa AccuracySD KappaSD;
% 
% % Plot Accuracy +- SD vs. k in barplot
% %  sigma in title
% figure(12);
% k_list = unique(D_am{1}(:,2));
% accStdDevs = [-D_am{1}(:,5), D_am{1}(:,5)];
% bar(k_list,D_am{1}(:,3),'FaceColor',[0.5 0.5 0.5]); hold on;
% errorbar(k_list,D_am{1}(idx,3),accStdDevs(:,1),accStdDevs(:,2),'k', 'linestyle', 'none');
% hold off;
% grid on; grid minor;
% ylabel('Accuracy');
% xlabel('k');
% title({['Accuracy at 100 DPI, \sigma = ',num2str(D_am{1}(1,1)),...
%     ', dataset "all",',...
%     ', with std. devs.,'],'10-repeat 10-fold cross validation'});
% print('plots/knn-AccVsSigma-allMixed-dpi100-cv10.eps','-depsc');
% 
% % Plot confusion matrix
% %  sigma in title
% figure(13);

%% Dataset "fewer, LOO", Accuracy vs. k
%Import all sigma-k data into D
[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
    importCVSigK(...
    '../data/knnFewerLOOCV-dpi100-rep1-results.csv');
D_fl{1}=[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD];

clear sigma k Accuracy Kappa AccuracySD KappaSD;

% Plot Accuracy +- SD vs. k in barplot
%  sigma in title
figure(14);
k_list = unique(D_fl{1}(:,2));
accStdDevs = [-D_fl{1}(:,5), D_fl{1}(:,5)];
bar(k_list,D_fl{1}(:,3),'FaceColor',[0.5 0.5 0.5]); hold on;
errorbar(k_list,D_fl{1}(:,3),accStdDevs(:,1),accStdDevs(:,2),'k', 'linestyle', 'none');
hold off;
grid on; grid minor;
ylabel('Accuracy');
xlabel('k');
title({['Accuracy at 100 DPI, \sigma = ',num2str(D_fl{1}(1,1)),...
    ', dataset "fewer",'],...
    'with std. devs., Leave-one-person-out cross validation'});
print('plots/knn-AccVsSigma-fewerLOO-dpi100-cv10.eps','-depsc');

% Plot confusion matrix
%  sigma in title
figure(15);
DPI=100;
%Load confusion matrix
confMatFL = importConfMat(...
    '../data/knnFewerLOOCV-dpi100-sig0.6-k1-confusionMatrix.csv');
%Scale down to 100 % range
n=sum(sum(confMatFL));
mat=(confMatFL./...
    repmat(sum(confMatFL,2),1,size(confMatFL,2)))*100;
%Digit names
names = cell(1,10);
for jt = 1:10
    names{jt} = num2str(jt-1);
end
%Colored plot of the confusion matrix values
imagesc(mat);
colormap(parula);
%Create strings from the matrix values
textStrings = num2str(mat(:),'%0.1f%%');
%Remove space padding
textStrings = strtrim(cellstr(textStrings));
%Create x and y coordinates for the strings
[x,y] = meshgrid(1:10);
%Plot the strings
hStrings = text(x(:),y(:),textStrings(:),...
    'HorizontalAlignment','center',...
    'FontSize',7);
%Get the middle value of the color range
midValue = mean(get(gca,'CLim'));
%Choose white/black text color based on cell color
textColors = repmat(mat(:) < midValue,1,3);
set(hStrings,{'Color'},num2cell(textColors,2));
colormap('parula');
colorbar;
caxis([0 100]);
set(gca, 'XTick',1:10,'YTick', 1:10);
set(gca,'XTickLabel',names);
set(gca,'YTickLabel',names);
xlabel('Reference');
ylabel('Prediction');
title({'k-NN Confusion Matrix, dataset "fewer",',...
    'k=1, 100 DPI, Leave-one-person-out cross validation'});
set(gca,'PlotBoxAspectRatio',[1 1 1]);
print(['plots/knn-ConfMat-fewerLOO',...
    '-dpi100-cv10.eps'],...
    '-depsc');

%% Dataset "all, LOO", Accuracy vs. k
%Import all sigma-k data into D_al
% ...
%For each DPI-sigma combination (100-1)
% Plot Accuracy +- SD vs. k in barplot
% ... figures 28,29,30
%  sigma in title
%For each DPI-sigma combination (100-1)
% Plot confusion matrix
%  sigma in title

[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
    importCVSigK(...
    '../data/knnAllLOOCV-dpi100-rep1-results.csv');
D_al{1}=[sigma,k,Accuracy,Kappa,AccuracySD,KappaSD];

clear sigma k Accuracy Kappa AccuracySD KappaSD;

% Plot Accuracy +- SD vs. k in barplot
%  sigma in title
figure(16);
k_list = unique(D_al{1}(:,2));
accStdDevs = [-D_al{1}(:,5), D_al{1}(:,5)];
bar(k_list,D_al{1}(:,3),'FaceColor',[0.5 0.5 0.5]); hold on;
errorbar(k_list,D_al{1}(:,3),accStdDevs(:,1),accStdDevs(:,2),'k', 'linestyle', 'none');
hold off;
grid on; grid minor;
ylabel('Accuracy');
xlabel('k');
title({['Accuracy at 100 DPI, \sigma = ',num2str(D_al{1}(1,1)),...
    ', dataset "all",'],...
    'with std. devs., Leave-one-person-out cross validation'});
print('plots/knn-AccVsSigma-allLOO-dpi100-cv.eps','-depsc');

% Plot confusion matrix
%  sigma in title
figure(17);
DPI=100;
%Load confusion matrix
confMatAL = importConfMat(...
    '../data/knnAllLOOCV-dpi100-sig0.6-k7-confusionMatrix.csv');
%Scale down to 100 % range
n=sum(sum(confMatAL));
mat=(confMatAL./...
    repmat(sum(confMatAL,2),1,size(confMatAL,2)))*100;
%Digit names
names = cell(1,10);
for jt = 1:10
    names{jt} = num2str(jt-1);
end
%Colored plot of the confusion matrix values
imagesc(mat);
colormap(parula);
%Create strings from the matrix values
textStrings = num2str(mat(:),'%0.1f%%');
%Remove space padding
textStrings = strtrim(cellstr(textStrings));
%Create x and y coordinates for the strings
[x,y] = meshgrid(1:10);
%Plot the strings
hStrings = text(x(:),y(:),textStrings(:),...
    'HorizontalAlignment','center',...
    'FontSize',7);
%Get the middle value of the color range
midValue = mean(get(gca,'CLim'));
%Choose white/black text color based on cell color
textColors = repmat(mat(:) < midValue,1,3);
set(hStrings,{'Color'},num2cell(textColors,2));
colormap('parula');
colorbar;
caxis([0 100]);
set(gca, 'XTick',1:10,'YTick', 1:10);
set(gca,'XTickLabel',names);
set(gca,'YTickLabel',names);
xlabel('Reference');
ylabel('Prediction');
title({'k-NN Confusion Matrix, dataset "all",',...
    'k=7, 100 DPI, Leave-one-person-out cross validation'});
set(gca,'PlotBoxAspectRatio',[1 1 1]);
print(['plots/knn-ConfMat-allLOO',...
    '-dpi100-cv.eps'],...
    '-depsc');


%% Dataset "G2M2", Accuracy vs. PCA Threshold and k
%Import data into D
[PCAThresh,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
    importCVSigK(...
    ['../data/pcaknnPersonDependentCV-',testPerson,...
    '-dpi100-sig0.6-rep10-results.csv']);
D=[PCAThresh,k,Accuracy,Kappa,AccuracySD,KappaSD];

clear PCAThresh k Accuracy Kappa AccuracySD KappaSD;
% Plot Accuracy with SD vs. k for different PCA threshold levels
figure(18);
PCAThresh_list = unique(D(:,1));
k_list = unique(D(:,2));
idx = find(D_pd{1}(:,1)==best_sigma(1));

accStdDevs = [-[D_pd{1}(idx,5);D(:,5)],[D_pd{1}(idx,5);D(:,5)]];
bars=[D_pd{1}(idx,3),...
    D(1:length(k_list),3),D((length(k_list)+1):(2*length(k_list)),3),...
    D((2*length(k_list)+1):(3*length(k_list)),3),...
    D((3*length(k_list)+1):(4*length(k_list)),3)];
h=bar([k_list,k_list,k_list,k_list,k_list], bars);
set(h,'BarWidth',1);
hold on;

numgroups=length(k_list);
numbars=size(bars,2);
groupwidth=min(0.8,numbars/(numbars+1.5));
for it=1:numbars
    x = (1:numgroups) - groupwidth/2 + (2*it-1) * groupwidth / (2*numbars);
    errorbar(x,...
        bars(:,it), accStdDevs(((it-1)*(numgroups)+1):(it*(numgroups)),1),...
        accStdDevs(((it-1)*(numgroups)+1):(it*(numgroups)),2),'k', 'linestyle', 'none');
end
hold off;
set(gca,'YGrid','on');
legend('Raw','PCA 80 %','PCA 90 %','PCA 95 %','PCA 99 %');
xlabel('k');
ylabel('Accuracy');
title({['Accuracy vs. k, 100 DPI, \sigma = 0.6, dataset ',testPerson,...
    ', with std. devs.,'],'10-repeat 10-fold cross validation'});
set(gca,'FontSize',9);
print(['plots/pca-AccVsK-',testPerson,...
    '-dpi100-cv10.eps'],'-depsc');

%% Dataset "fewer, mixed", Accuracy vs. PCA Threshold and k
%Import data into D
[PCAThresh,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
    importCVSigK(...
    '../data/pcaknnFewerMixedCV-dpi100-sig0.6-rep10-results.csv');
D=[PCAThresh,k,Accuracy,Kappa,AccuracySD,KappaSD];

clear PCAThresh k Accuracy Kappa AccuracySD KappaSD;
% Plot Accuracy with SD vs. k for different PCA threshold levels
figure(19);
PCAThresh_list = unique(D(:,1));
k_list = unique(D(:,2));
idx = find(D_fm{1}(:,1)==best_sigma(1));

accStdDevs = [-[D_fm{1}(idx,5);D(:,5)],[D_fm{1}(idx,5);D(:,5)]];
bars=[D_fm{1}(idx,3),...
    D(1:length(k_list),3),D((length(k_list)+1):(2*length(k_list)),3),...
    D((2*length(k_list)+1):(3*length(k_list)),3),...
    D((3*length(k_list)+1):(4*length(k_list)),3)];
h=bar([k_list,k_list,k_list,k_list,k_list], bars);
set(h,'BarWidth',1);
hold on;

numgroups=length(k_list);
numbars=size(bars,2);
groupwidth=min(0.8,numbars/(numbars+1.5));
for it=1:numbars
    x = (1:numgroups) - groupwidth/2 + (2*it-1) * groupwidth / (2*numbars);
    errorbar(x,...
        bars(:,it), accStdDevs(((it-1)*(numgroups)+1):(it*(numgroups)),1),...
        accStdDevs(((it-1)*(numgroups)+1):(it*(numgroups)),2),'k', 'linestyle', 'none');
end
hold off;
set(gca,'YGrid','on');
legend('Raw','PCA 80 %','PCA 90 %','PCA 95 %','PCA 99 %','Location','East');
xlabel('k');
ylabel('Accuracy');
title({['Accuracy vs. k, 100 DPI, \sigma = 0.6, dataset "fewer"',...
    ', with std. devs.,'],'10-repeat 10-fold cross validation'});
set(gca,'FontSize',9);
print('plots/pca-AccVsK-fewerMixed-dpi100-cv10.eps','-depsc');

%% Dataset "all, LOO", Accuracy vs. PCA Threshold and k
%Import data into D
[PCAThresh,k,Accuracy,Kappa,AccuracySD,KappaSD] = ...
    importCVSigK(...
    '../data/pcaknnAllLOOCV-dpi100-sig0.6-rep1-results.csv');
D=[PCAThresh,k,Accuracy,Kappa,AccuracySD,KappaSD];

clear PCAThresh k Accuracy Kappa AccuracySD KappaSD;
% Plot Accuracy with SD vs. k for different PCA threshold levels
figure(20);
PCAThresh_list = unique(D(:,1));
k_list = unique(D(:,2));

idx = find(D_al{1}(:,1)==best_sigma(1));
accStdDevs = [-[D_al{1}(idx,5);D(:,5)],[...
    D_al{1}(idx,5);...
    D(:,5)]];

bars=[...
    D_al{1}(idx,3),... 
    D(1:length(k_list),3),D((length(k_list)+1):(2*length(k_list)),3),...
    D((2*length(k_list)+1):(3*length(k_list)),3),...
    D((3*length(k_list)+1):(4*length(k_list)),3)];
h=bar([...
    k_list,...
    k_list,k_list,k_list,k_list], bars);
set(h,'BarWidth',1);
hold on;

numgroups=length(k_list);
numbars=size(bars,2);
groupwidth=min(0.8,numbars/(numbars+1.5));
for it=1:numbars
    x = (1:numgroups) - groupwidth/2 + (2*it-1) * groupwidth / (2*numbars);
    errorbar(x,...
        bars(:,it), accStdDevs(((it-1)*(numgroups)+1):(it*(numgroups)),1),...
        accStdDevs(((it-1)*(numgroups)+1):(it*(numgroups)),2),'k', 'linestyle', 'none');
end
hold off;
set(gca,'YGrid','on');
legend(...
    'Raw',...
    'PCA 80 %','PCA 90 %','PCA 95 %','PCA 99 %','Location','East');
xlabel('k');
ylabel('Accuracy');
title({['Accuracy vs. k, 100 DPI, \sigma = 0.6, dataset "all"',...
    ', with std. devs.,'],'Leave-one-person-out cross validation'});
set(gca,'FontSize',9);
print('plots/pca-AccVsK-allLOO-dpi100-cv10.eps','-depsc'); %TODO: Uncomment when raw data is in D_al{1}

%% Plot cumulative variance vs. number of principal components
pca_pd_sdev = csvread(['../data/pca-',testPerson,'-sdev.csv'],1,1);
pca_fewer_sdev = csvread('../data/pca-Fewer-sdev.csv',1,1);
pca_all_sdev = csvread('../data/pca-All-sdev.csv',1,1);
pca_pd_cumvar=pca_pd_sdev.^2;
pca_fewer_cumvar=pca_fewer_sdev.^2;
pca_all_cumvar=pca_all_sdev.^2;
pca_pd_cumvar = pca_pd_cumvar / sum(pca_pd_cumvar);
pca_fewer_cumvar = pca_fewer_cumvar / sum(pca_fewer_cumvar);
pca_all_cumvar = pca_all_cumvar / sum(pca_all_cumvar);
pca_pd_cumvar = cumsum(pca_pd_cumvar);
pca_fewer_cumvar = cumsum(pca_fewer_cumvar);
pca_all_cumvar = cumsum(pca_all_cumvar);
figure(21);
plot(1:324,100*pca_pd_cumvar,'.r-',...
    1:324,100*pca_fewer_cumvar,'.g-',...
    1:324,100*pca_all_cumvar,'.b-');
xlim([0 150]);
set(gca,'XMinorTick','on');
grid on;
grid minor;
xlabel('Number of principal components (324 max)');
ylabel('Cumulative proportion of variance [%]');
title({'Explained variance vs. number of principal components,',...
    '100 DPI, \sigma = 0.6, Z-score standardization'});
legend(['Dataset ',testPerson],'Dataset "fewer"','Dataset "all"',...
    'Location','East');
print('plots/pca-CumvarVsNumcomp.eps','-depsc');